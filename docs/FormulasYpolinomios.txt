-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Sistema certificado de decisión proposicional basado en polinomios.
--   
--   Sistema certificado de decisión proposicional basado en polinomios.
@package FormulasYpolinomios
@version 0.1.0.0


-- | Código correspondiente al artículo "Sistema certificado de decisión
--   proposicional basado en polinomios" presentado en el CLAI2009
--   (Workshop on Computational Logic and Artificial Intelligence).
module CLAI2009

-- | Los símbolos proposicionales se representan por cadenas.
type SimboloProposicional = String

-- | FProp es el tipo de las fórmulas proposicionales definidas por
--   
--   <ul>
--   <li>T y F son fórmulas</li>
--   <li>Si A es una fórmula, también lo es -A.</li>
--   <li>Si A y B son fórmulas, entonces (A &amp; B), (A v B), (A --&gt; B)
--   y (A <a>--</a> B) también lo son.</li>
--   </ul>
data FProp
T :: FProp
F :: FProp
Atom :: SimboloProposicional -> FProp
Neg :: FProp -> FProp
Conj :: FProp -> FProp -> FProp
Disj :: FProp -> FProp -> FProp
Impl :: FProp -> FProp -> FProp
Equi :: FProp -> FProp -> FProp

-- | Declaración del procedimiento de escritura de fórmulas.

-- | Ejemplo de fórmulas.
p :: FProp

-- | Ejemplo de fórmulas.
q :: FProp

-- | Ejemplo de fórmulas.
r :: FProp

-- | <tt>(no f)</tt> es la negación de f
no :: FProp -> FProp

-- | <tt>f / g</tt> es la disyunción de f y g
(\/) :: FProp -> FProp -> FProp
infixr 5 \/

-- | f / g es la conjunción de f y g
(/\) :: FProp -> FProp -> FProp
infixr 4 /\

-- | f --&gt; g es la implicación de f a g
(-->) :: FProp -> FProp -> FProp
infixr 3 -->

-- | f <a>--</a> g es la equivalencia entre f y g
(<-->) :: FProp -> FProp -> FProp
infixr 2 <-->

-- | FProp es una instancia de Arbitrary. Por ejemplo,
--   
--   <pre>
--   &gt; sample (arbitrary :: Gen FProp)
--   T
--   (no p / (F / F))
--   no r
--   ((q --&gt; (T / s)) --&gt; F)
--   ((((T --&gt; p) / s) --&gt; no (q --&gt; q)) --&gt; s)
--   ((no (r / r) --&gt; no (p --&gt; s)) <i> ((p <a>--</a> T) </i> no (s <a>--</a> F)))
--   (F --&gt; s)
--   no no p
--   </pre>

-- | Las interpretaciones como listas de fórmulas atómicas.
type Interpretacion = [FProp]

-- | (significado f i) es el significado de la fórmula f en la
--   interprestación i. Por ejemplo,
--   
--   <pre>
--   &gt;&gt;&gt; significado ((p \/ q) /\ ((no q) \/ r)) [r]
--   False
--   
--   &gt;&gt;&gt; significado ((p \/ q) /\ ((no q) \/ r)) [p,r]
--   True
--   </pre>
significado :: FProp -> Interpretacion -> Bool

-- | (subconjuntos x) es la lista de los subconjuntos de x. Por ejemplo,
--   
--   <pre>
--   &gt;&gt;&gt; subconjuntos "abc"
--   ["abc","ab","ac","a","bc","b","c",""]
--   </pre>
subconjuntos :: [a] -> [[a]]

-- | (simbolosPropForm f) es el conjunto formado por todos los símbolos
--   proposicionales que aparecen en f. Por ejemplo,
--   
--   <pre>
--   &gt;&gt;&gt; simbolosPropForm (p /\ q --&gt; p)
--   [p,q]
--   </pre>
simbolosPropForm :: FProp -> [FProp]
interpretacionesForm :: FProp -> [Interpretacion]
esModeloFormula :: Interpretacion -> FProp -> Bool
modelosFormula :: FProp -> [Interpretacion]
esValida :: FProp -> Bool
prop_esValida :: FProp -> Bool
esInsatisfacible :: FProp -> Bool
esSatisfacible :: FProp -> Bool
unionGeneral :: Eq a => [[a]] -> [a]
simbolosPropConj :: [FProp] -> [FProp]
interpretacionesConjunto :: [FProp] -> [Interpretacion]
esModeloConjunto :: Interpretacion -> [FProp] -> Bool
modelosConjunto :: [FProp] -> [Interpretacion]
esConsistente :: [FProp] -> Bool
esInconsistente :: [FProp] -> Bool
esConsecuencia :: [FProp] -> FProp -> Bool
prop_esConsecuencia :: [FProp] -> FProp -> Bool
equivalentes :: FProp -> FProp -> Bool
caracteres :: Gen Char
type Variable = String
variables :: Gen String
variables' :: Gen String
data Monomio
M :: [Variable] -> Monomio
mUno :: Monomio
esMonomio :: Monomio -> Bool
monomiosN :: Int -> Gen Monomio
monomios :: Gen Monomio
monomios' :: Gen Monomio
prop_MonomiosGeneraMonomios :: Monomio -> Bool
data Polinomio
P :: [Monomio] -> Polinomio
cero :: Polinomio
uno :: Polinomio
esPolinomio :: Polinomio -> Bool
polinomiosN :: Int -> Gen Polinomio
polinomios :: Gen Polinomio
polinomios' :: Gen Polinomio
prop_PolinomiosGeneraPolinomios :: Polinomio -> Bool
suma :: Polinomio -> Polinomio -> Polinomio
sumaAux :: [Monomio] -> [Monomio] -> [Monomio]
prop_suma_bien_definida :: Polinomio -> Polinomio -> Bool
prop_suma_conmutativa :: Polinomio -> Polinomio -> Bool
prop_suma_asociativa :: Polinomio -> Polinomio -> Polinomio -> Bool
prop_suma_neutro :: Polinomio -> Bool
prop_suma_simetrico :: Polinomio -> Bool
prop_distributiva :: Polinomio -> Polinomio -> Polinomio -> Bool
productoMM :: Monomio -> Monomio -> Monomio
productoMP :: Monomio -> Polinomio -> Polinomio
producto :: Polinomio -> Polinomio -> Polinomio
prop_prod_bien_definido :: Polinomio -> Polinomio -> Bool
prop_prod_conmutativa :: Polinomio -> Polinomio -> Bool
deriv :: Polinomio -> Variable -> Polinomio
prop_deriv_bien_definida :: Polinomio -> Variable -> Bool
prop_deriv_deriv :: Polinomio -> Variable -> Bool
prop_deriv_suma :: Polinomio -> Polinomio -> Variable -> Bool
prop_deriv_prod :: Polinomio -> Polinomio -> Variable -> Bool
tr :: FProp -> Polinomio
pro_tr_bien_definida :: FProp -> Bool
theta :: Polinomio -> FProp
thetaAux :: [Monomio] -> FProp
theta2 :: Monomio -> FProp
theta2Aux :: [SimboloProposicional] -> FProp
prop_theta_tr :: FProp -> Bool
prop_tr_theta :: Polinomio -> Bool
derivP :: FProp -> SimboloProposicional -> FProp
sustituir :: FProp -> SimboloProposicional -> FProp -> FProp
prop_derivP_sustituir :: FProp -> Bool
variablesProp :: FProp -> [SimboloProposicional]
indep :: Polinomio -> Variable -> Polinomio
delta :: Polinomio -> Polinomio -> Variable -> Polinomio
delta' :: Polinomio -> Polinomio -> Variable -> Polinomio
prop_equiv_delta_delta' :: Polinomio -> Polinomio -> Bool
variablesMon :: Monomio -> [Variable]
variablesPol :: Polinomio -> [Variable]
deltaP :: FProp -> FProp -> SimboloProposicional -> FProp
prop_adecuacion_deltaP :: FProp -> FProp -> Bool
pares :: [a] -> [(a, a)]
derivadas :: [Polinomio] -> Variable -> [Polinomio]
derivadasP :: [FProp] -> SimboloProposicional -> [FProp]
deltaRefutable :: [Polinomio] -> Bool
deltaRefutableP' :: [FProp] -> Bool
prop_def_alt_deltaRefutableP :: [FProp] -> Bool
prop_adecuacion_completitud_deltaP :: [FProp] -> Bool
deltaDemostrable :: [FProp] -> FProp -> Bool
prop_adecuacion_completitud_delta_2 :: [FProp] -> FProp -> Bool
deltaTeorema :: FProp -> Bool
prop_adecuacion_completitud_delta_3 :: FProp -> Bool
deltaRefutableP :: [FProp] -> Bool
deltaRefutableSop :: [Polinomio] -> Bool
deltaRefutableSop' :: [Polinomio] -> [Polinomio] -> Bool
derivadasPolConjunto :: Polinomio -> [Polinomio] -> [Polinomio]
derivadasPolPol :: Polinomio -> Polinomio -> [Polinomio]
prop_deltaRefutableSop :: [Polinomio] -> Bool
deltaRefutablePSop :: [FProp] -> Bool
prop_adecuacion_completitud_deltaPSop :: [FProp] -> Bool
palomar :: [FProp]
instance GHC.Classes.Ord CLAI2009.Polinomio
instance GHC.Classes.Eq CLAI2009.Polinomio
instance GHC.Classes.Ord CLAI2009.Monomio
instance GHC.Classes.Eq CLAI2009.Monomio
instance GHC.Classes.Ord CLAI2009.FProp
instance GHC.Classes.Eq CLAI2009.FProp
instance GHC.Show.Show CLAI2009.FProp
instance Test.QuickCheck.Arbitrary.Arbitrary CLAI2009.FProp
instance GHC.Show.Show CLAI2009.Monomio
instance Test.QuickCheck.Arbitrary.Arbitrary CLAI2009.Monomio
instance GHC.Show.Show CLAI2009.Polinomio
instance Test.QuickCheck.Arbitrary.Arbitrary CLAI2009.Polinomio
instance GHC.Num.Num CLAI2009.Polinomio
